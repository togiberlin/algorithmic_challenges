const movingMedian = require('../82_moving_median/moving_median.js');

describe('movingMedian', () => {
  test('[3, 1, 3, 5, 10, 6, 4, 3, 1] returns 1,2,3,5,6,6,4,3', () => {
    expect(movingMedian([3, 1, 3, 5, 10, 6, 4, 3, 1])).toBe('1,2,3,5,6,6,4,3');
  });

  test('[5,2,4,6] returns 2,3,4', () => {
    expect(movingMedian([5, 2, 4, 6])).toBe('2,3,4');
  });

  test('[2,2,4,6,32,8,2,-12,4,6] returns 2,3,5,19,20,5,-5,-4,5', () => {
    expect(movingMedian([2, 2, 4, 6, 32, 8, 2, -12, 4, 6]))
        .toBe('2,3,5,19,20,5,-5,-4,5');
  });

  test('[3, 2,4,6,32,8,2,-12,4,6] returns 2,3,4,6,8,8,2,2,4', () => {
    expect(movingMedian([3, 2, 4, 6, 32, 8, 2, -12, 4, 6]))
        .toBe('2,3,4,6,8,8,2,2,4');
  });

  test('[4, 2,4,6,32,8,2,-12,4,6] returns 2,3,4,5,7,7,5,3,3', () => {
    expect(movingMedian([4, 2, 4, 6, 32, 8, 2, -12, 4, 6]))
        .toBe('2,3,4,5,7,7,5,3,3');
  });

  test.skip('[5, 2,4,6,32,8,2,-12,4,6] returns 2,3,4,5,6,6,6,4,4', () => {
    expect(movingMedian([5, 2, 4, 6, 32, 8, 2, -12, 4, 6]))
        .toBe('2,3,4,5,6,6,6,4,4');
  });

  test.skip('[6, 2,4,6,32,8,2,-12,4,6] returns 2,3,4,5,6,5,5,5,5', () => {
    expect(movingMedian([6, 2, 4, 6, 32, 8, 2, -12, 4, 6]))
        .toBe('2,3,4,5,6,5,5,5,5');
  });

  test('[3,0,0,-2,0,2,0,-2] returns 0,0,0,0,0,0,0', () => {
    expect(movingMedian([3, 0, 0, -2, 0, 2, 0, -2])).toBe('0,0,0,0,0,0,0');
  });

  test('[3, -2,0,1,0,-1,-2,-3,-2,-1,0,0] returns -2,-1,0,0,0,-1,-2,-2,-2,-1,0',
      () => {
        expect(movingMedian([3, -2, 0, 1, 0, -1, -2, -3, -2, -1, 0, 0]))
            .toBe('-2,-1,0,0,0,-1,-2,-2,-2,-1,0');
      });

  test('[1, 1,2,3,-4,3,2,1] returns 1,2,3,-4,3,2,1', () => {
    expect(movingMedian([1, 1, 2, 3, -4, 3, 2, 1])).toBe('1,2,3,-4,3,2,1');
  });
});
